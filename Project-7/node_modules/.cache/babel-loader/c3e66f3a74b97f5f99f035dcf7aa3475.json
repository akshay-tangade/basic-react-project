{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\React\\\\my-app\\\\basic-react-project\\\\Project-7\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport MoviesList from './components/MoviesList'; //import AddMovie from './components/AddMovie';\n\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await axios.get('https://swapi.dev/api/film/');\n      console.log(response);\n\n      if (response.statusText !== 'OK') {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.data.results;\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]); // async function addMovieHandler(movie) {\n  //   const response = await fetch('https://react-http-ac094-default-rtdb.firebaseio.com/movies.json', {\n  //     method: 'POST',\n  //     body: JSON.stringify(movie),\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     }\n  //   });\n  //   const data = await response.json();\n  //   console.log(data);\n  // }\n  // async function fetchMoviesHandler() {\n  //   const response= await axios.get('https://swapi.dev/api/films/')\n  //       console.log(response);\n  //       const transformedMovies = response.data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     };\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \" \", content));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Learning/React/my-app/basic-react-project/Project-7/src/App.js"],"names":["React","useState","useEffect","useCallback","axios","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","get","console","log","statusText","Error","data","results","loadedMovies","key","push","id","title","openingText","releaseDate","message","content","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport MoviesList from './components/MoviesList';\n//import AddMovie from './components/AddMovie';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get('https://swapi.dev/api/film/');\n      console.log(response);\n      if (response.statusText !== 'OK') {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.data.results;\n\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate,\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  // async function addMovieHandler(movie) {\n  //   const response = await fetch('https://react-http-ac094-default-rtdb.firebaseio.com/movies.json', {\n  //     method: 'POST',\n  //     body: JSON.stringify(movie),\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     }\n  //   });\n  //   const data = await response.json();\n  //   console.log(data);\n  // }\n  // async function fetchMoviesHandler() {\n  //   const response= await axios.get('https://swapi.dev/api/films/')\n  //       console.log(response);\n  //       const transformedMovies = response.data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     };\n  \n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      {/* <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section> */}\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section> {content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}